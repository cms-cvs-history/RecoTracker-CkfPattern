process CkfPattern = 
{
  untracked PSet maxEvents = {untracked int32 input = -1}

  ### message logger specialized for tracking regression tests
  service = MessageLogger   {
  	untracked vstring destinations   = { "cout" }
        untracked vstring categories     = { "TrackingRegressionTest" }
 	untracked vstring debugModules   = { "ckfTrackCandidates","ctfWithMaterialTracks" }
  	untracked PSet cout          = { untracked string threshold = "DEBUG" 
	  untracked PSet INFO          = { untracked int32 limit = 0 }
	  untracked PSet DEBUG         = { untracked int32 limit = 0 }
	  untracked PSet TrackingRegressionTest = { untracked int32 limit = 10000000}
        }
  }

	 
  ### StripCPEfromTrackAngleESProducer es_module
  include "RecoLocalTracker/SiStripRecHitConverter/data/StripCPEfromTrackAngle.cfi"

  ### Pixel Clusterizer and RecHit producer modules
  include "RecoLocalTracker/SiPixelClusterizer/data/SiPixelClusterizer.cfi"
  include "RecoLocalTracker/SiPixelRecHits/data/SiPixelRecHits.cfi" 

  ### SiliconStrip Clusterizer and RecHit producer modules
  include "RecoLocalTracker/SiStripClusterizer/data/SiStripClusterizer_SimData.cfi"
  include "RecoLocalTracker/SiStripRecHitConverter/data/SiStripRecHitMatcher.cfi"
  include "RecoLocalTracker/SiStripRecHitConverter/data/SiStripRecHitConverter.cfi"

  ### Strip Tracker calibrations ES sources
  ### fake calibs ###
  include "CalibTracker/Configuration/data/Tracker_FakeConditions.cff"

  ### GlobalPixelSeedGenerator module ###
  include "RecoTracker/TkSeedGenerator/data/GlobalMixedSeeds.cff"

  # CKFTrackCandidateMaker
  include "RecoTracker/CkfPattern/data/CkfTrackCandidates.cff"

  source = PoolSource 
  { 
    untracked vstring fileNames = {'file:digis.root'}
  }


  module out = PoolOutputModule 
  {
    untracked string fileName = 'digisToCands.root'
  }

  path p = 
  {
    siPixelClusters,siPixelRecHits, siStripClusters,siStripMatchedRecHits,
    globalMixedSeeds,ckfTrackCandidates
  }

  endpath e = 
  {
    out
  }
  #untracked PSet options = { untracked bool wantSummary = true  }
  #service = SimpleProfiling {}
}
